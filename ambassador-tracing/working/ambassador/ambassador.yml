apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "25"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"deployment.kubernetes.io/revision":"16"},"generation":24,"name":"ambassador","namespace":"ambassador","resourceVersion":"458585","selfLink":"/apis/apps/v1/namespaces/ambassador/deployments/ambassador","uid":"da875b55-adbc-40d6-bfca-1c5fc80d7a69"},"spec":{"progressDeadlineSeconds":600,"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"service":"ambassador"}},"strategy":{"rollingUpdate":{"maxSurge":"25%","maxUnavailable":"25%"},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"config.linkerd.io/enable-debug-sidecar":"true","consul.hashicorp.com/connect-inject":"false","kubectl.kubernetes.io/restartedAt":"2020-04-22T11:41:52-07:00","linkerd.io/created-by":"linkerd/cli edge-20.4.2","linkerd.io/identity-mode":"default","linkerd.io/proxy-version":"edge-20.4.2","sidecar.istio.io/inject":"false"},"labels":{"app.kubernetes.io/managed-by":"getambassador.io","linkerd.io/control-plane-ns":"linkerd","linkerd.io/proxy-deployment":"ambassador","service":"ambassador"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"service":"ambassador"}},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"containers":[{"env":[{"name":"AMBASSADOR_CONFIG_BASE_DIR","value":"/tmp/ambassador-config"},{"name":"AMBASSADOR_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}}],"image":"quay.io/datawire/ambassador:1.4.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/ambassador/v0/check_alive","port":8877,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":3,"successThreshold":1,"timeoutSeconds":1},"name":"ambassador","ports":[{"containerPort":8080,"name":"http","protocol":"TCP"},{"containerPort":8443,"name":"https","protocol":"TCP"},{"containerPort":8877,"name":"admin","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/ambassador/v0/check_ready","port":8877,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":3,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{"cpu":"1","memory":"400Mi"},"requests":{"cpu":"200m","memory":"100Mi"}},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/tmp","name":"empty-dir-tmp"},{"mountPath":"/tmp/ambassador-config","name":"empty-dir-tmp"},{"mountPath":"/tmp/ambassador-pod-info","name":"ambassador-pod-info"}]},{"image":"gcr.io/linkerd-io/debug:edge-20.4.2","imagePullPolicy":"IfNotPresent","name":"linkerd-debug","terminationMessagePolicy":"FallbackToLogsOnError"},{"env":[{"name":"LINKERD2_PROXY_LOG","value":"warn,linkerd=info"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_ADDR","value":"linkerd-dst.linkerd.svc.cluster.local:8086"},{"name":"LINKERD2_PROXY_CONTROL_LISTEN_ADDR","value":"0.0.0.0:4190"},{"name":"LINKERD2_PROXY_ADMIN_LISTEN_ADDR","value":"0.0.0.0:4191"},{"name":"LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR","value":"127.0.0.1:4140"},{"name":"LINKERD2_PROXY_INBOUND_LISTEN_ADDR","value":"0.0.0.0:4143"},{"name":"LINKERD2_PROXY_DESTINATION_GET_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES","value":"svc.cluster.local."},{"name":"LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE","value":"10000ms"},{"name":"LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE","value":"10000ms"},{"name":"_pod_ns","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"LINKERD2_PROXY_DESTINATION_CONTEXT","value":"ns:$(_pod_ns)"},{"name":"LINKERD2_PROXY_IDENTITY_DIR","value":"/var/run/linkerd/identity/end-entity"},{"name":"LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS","value":"-----BEGIN CERTIFICATE-----\nMIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0\neS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDIxMjM1NTM3WhcNMjEwNDIx\nMjM1NTU3WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j\nYWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASkTFeYcvwDB4+d2NuKyLgeOatG\n1/ylawjXfgzYKCqPzb0KsBCJSzSGZ6D3CXgK8JRp38FVxWwYjowGNgo9DYvpo0Iw\nQDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC\nMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIgPIR8cTdKY0hebMQB\nGeQZnw8gS92TzVIeGoF4wOTyAXACIQCctJzw0Xw02jRrL8DxSeKrorFIxjs1gZa2\njJ5InDkb7g==\n-----END CERTIFICATE-----\n"},{"name":"LINKERD2_PROXY_IDENTITY_TOKEN_FILE","value":"/var/run/secrets/kubernetes.io/serviceaccount/token"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_ADDR","value":"linkerd-identity.linkerd.svc.cluster.local:8080"},{"name":"_pod_sa","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"_l5d_ns","value":"linkerd"},{"name":"_l5d_trustdomain","value":"cluster.local"},{"name":"LINKERD2_PROXY_IDENTITY_LOCAL_NAME","value":"$(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)"},{"name":"LINKERD2_PROXY_IDENTITY_SVC_NAME","value":"linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)"},{"name":"LINKERD2_PROXY_DESTINATION_SVC_NAME","value":"linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)"},{"name":"LINKERD2_PROXY_TAP_SVC_NAME","value":"linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)"}],"image":"gcr.io/linkerd-io/proxy:edge-20.4.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/metrics","port":4191},"initialDelaySeconds":10},"name":"linkerd-proxy","ports":[{"containerPort":4143,"name":"linkerd-proxy"},{"containerPort":4191,"name":"linkerd-admin"}],"readinessProbe":{"httpGet":{"path":"/ready","port":4191},"initialDelaySeconds":2},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsUser":2102},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/var/run/linkerd/identity/end-entity","name":"linkerd-identity-end-entity"}]}],"dnsPolicy":"ClusterFirst","initContainers":[{"args":["--incoming-proxy-port","4143","--outgoing-proxy-port","4140","--proxy-uid","2102","--inbound-ports-to-ignore","4190,4191"],"image":"gcr.io/linkerd-io/proxy-init:v1.3.2","imagePullPolicy":"IfNotPresent","name":"linkerd-init","resources":{"limits":{"cpu":"100m","memory":"50Mi"},"requests":{"cpu":"10m","memory":"10Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_ADMIN","NET_RAW"]},"privileged":false,"readOnlyRootFilesystem":true,"runAsNonRoot":false,"runAsUser":0},"terminationMessagePolicy":"FallbackToLogsOnError"}],"restartPolicy":"Always","schedulerName":"default-scheduler","securityContext":{"runAsUser":8888},"serviceAccount":"ambassador","serviceAccountName":"ambassador","terminationGracePeriodSeconds":30,"volumes":[{"emptyDir":{},"name":"empty-dir-tmp"},{"downwardAPI":{"defaultMode":420,"items":[{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels"},"path":"labels"}]},"name":"ambassador-pod-info"},{"emptyDir":{"medium":"Memory"},"name":"linkerd-identity-end-entity"}]}}},"status":{"availableReplicas":1,"conditions":[{"message":"Deployment has minimum availability.","reason":"MinimumReplicasAvailable","status":"True","type":"Available"},{"message":"ReplicaSet \"ambassador-54887c896c\" has successfully progressed.","reason":"NewReplicaSetAvailable","status":"True","type":"Progressing"}],"observedGeneration":24,"readyReplicas":1,"replicas":1,"updatedReplicas":1}}
    creationTimestamp: "2020-04-21T19:06:50Z"
    generation: 33
    name: ambassador
    namespace: ambassador
    resourceVersion: "530301"
    selfLink: /apis/apps/v1/namespaces/ambassador/deployments/ambassador
    uid: da875b55-adbc-40d6-bfca-1c5fc80d7a69
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        service: ambassador
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          config.linkerd.io/enable-debug-sidecar: "true"
          config.linkerd.io/trace-collector: otel-collector.tracing:55678
          consul.hashicorp.com/connect-inject: "false"
          kubectl.kubernetes.io/restartedAt: "2020-04-22T14:56:16-07:00"
          linkerd.io/created-by: linkerd/cli edge-20.4.2
          linkerd.io/identity-mode: default
          linkerd.io/proxy-version: edge-20.4.2
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: getambassador.io
          linkerd.io/control-plane-ns: linkerd
          linkerd.io/proxy-deployment: ambassador
          service: ambassador
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    service: ambassador
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - env:
          - name: AMBASSADOR_CONFIG_BASE_DIR
            value: /tmp/ambassador-config
          - name: AMBASSADOR_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/datawire/ambassador:1.4.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ambassador/v0/check_alive
              port: 8877
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          name: ambassador
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
          - containerPort: 8877
            name: admin
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ambassador/v0/check_ready
              port: 8877
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: empty-dir-tmp
          - mountPath: /tmp/ambassador-config
            name: empty-dir-tmp
          - mountPath: /tmp/ambassador-pod-info
            name: ambassador-pod-info
        - image: gcr.io/linkerd-io/debug:edge-20.4.2
          imagePullPolicy: IfNotPresent
          name: linkerd-debug
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: empty-dir-tmp
        - env:
          - name: LINKERD2_PROXY_LOG
            value: warn,linkerd=info
          - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
            value: linkerd-dst.linkerd.svc.cluster.local:8086
          - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
            value: 0.0.0.0:4190
          - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
            value: 0.0.0.0:4191
          - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
            value: 127.0.0.1:4140
          - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
            value: 0.0.0.0:4143
          - name: LINKERD2_PROXY_DESTINATION_GET_SUFFIXES
            value: svc.cluster.local.
          - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
            value: svc.cluster.local.
          - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
            value: 10000ms
          - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
            value: 10000ms
          - name: _pod_ns
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LINKERD2_PROXY_DESTINATION_CONTEXT
            value: ns:$(_pod_ns)
          - name: LINKERD2_PROXY_IDENTITY_DIR
            value: /var/run/linkerd/identity/end-entity
          - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
            value: |
              -----BEGIN CERTIFICATE-----
              MIIBgzCCASmgAwIBAgIBATAKBggqhkjOPQQDAjApMScwJQYDVQQDEx5pZGVudGl0
              eS5saW5rZXJkLmNsdXN0ZXIubG9jYWwwHhcNMjAwNDIxMjM1NTM3WhcNMjEwNDIx
              MjM1NTU3WjApMScwJQYDVQQDEx5pZGVudGl0eS5saW5rZXJkLmNsdXN0ZXIubG9j
              YWwwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASkTFeYcvwDB4+d2NuKyLgeOatG
              1/ylawjXfgzYKCqPzb0KsBCJSzSGZ6D3CXgK8JRp38FVxWwYjowGNgo9DYvpo0Iw
              QDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
              MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIgPIR8cTdKY0hebMQB
              GeQZnw8gS92TzVIeGoF4wOTyAXACIQCctJzw0Xw02jRrL8DxSeKrorFIxjs1gZa2
              jJ5InDkb7g==
              -----END CERTIFICATE-----
          - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
            value: /var/run/secrets/kubernetes.io/serviceaccount/token
          - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
            value: linkerd-identity.linkerd.svc.cluster.local:8080
          - name: _pod_sa
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: _l5d_ns
            value: linkerd
          - name: _l5d_trustdomain
            value: cluster.local
          - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
            value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
          - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
            value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
          - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
            value: linkerd-destination.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
          - name: LINKERD2_PROXY_TAP_SVC_NAME
            value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
          image: gcr.io/linkerd-io/proxy:edge-20.4.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: 4191
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: linkerd-proxy
          ports:
          - containerPort: 4143
            name: linkerd-proxy
            protocol: TCP
          - containerPort: 4191
            name: linkerd-admin
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 4191
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 2102
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/run/linkerd/identity/end-entity
            name: linkerd-identity-end-entity
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --incoming-proxy-port
          - "4143"
          - --outgoing-proxy-port
          - "4140"
          - --proxy-uid
          - "2102"
          - --inbound-ports-to-ignore
          - 4190,4191
          image: gcr.io/linkerd-io/proxy-init:v1.3.2
          imagePullPolicy: IfNotPresent
          name: linkerd-init
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ambassador
        serviceAccountName: ambassador
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: empty-dir-tmp
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
          name: ambassador-pod-info
        - emptyDir:
            medium: Memory
          name: linkerd-identity-end-entity
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-04-22T18:57:30Z"
      lastUpdateTime: "2020-04-22T18:57:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-04-21T19:17:01Z"
      lastUpdateTime: "2020-04-22T22:22:31Z"
      message: ReplicaSet "ambassador-7d7c66bb96" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 33
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
